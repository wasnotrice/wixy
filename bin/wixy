#!/usr/bin/env ruby
require 'optparse'
require 'ostruct'
require 'wixy'

cli_options  = {}
wixy_options = {}

# Defaults
cli_options[:encrypt] = true
cli_options[:decrypt] = false
cli_options[:mode]    = :encrypt
wixy_options[:cipher] = :caesar
wixy_options[:shift]  = 3

begin
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options] TEXT"
  opts.on("-e", "--encrypt", "Encrypt text (default)") do |e|
    cli_options[:encrypt] = e
  end

  ciphers = Wixy::Ciphers.all
  cipher_names = ciphers
    .map {|c| "  - [#{c[0]}]#{c[1,c.length-1]}"}

  opts.on("-c", "--cipher CIPHER", ciphers.map(&:to_sym), "Use CIPHER", *cipher_names) do |c|
    wixy_options[:cipher] = c
  end

  opts.on("-d", "--decrypt", "Decrypt text") do |d|
    cli_options[:decrypt] = d
  end

  opts.on("-k", "--key KEY", "Use KEY to create cipher") do |k|
    wixy_options[:key] = k
  end

  opts.on("-s", "--shift [INTEGER]", Integer, "Alphabet shift") do |s|
    wixy_options[:shift] = s
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on_tail("-v", "--version", "Show version") do
    puts Wixy::VERSION
    exit
  end
end.parse!
rescue => e
  puts e.backtrace
  abort e.message
end

text = ARGV.pop
abort(parser) unless text
cli_options[:mode] = :decrypt if cli_options[:decrypt]
result = Wixy.public_send(cli_options[:mode], text, wixy_options)
puts result
